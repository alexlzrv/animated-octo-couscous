// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Metrics_UpdateMetrics_FullMethodName = "/server.Metrics/UpdateMetrics"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	UpdateMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_UpdateMetricsClient, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) UpdateMetrics(ctx context.Context, opts ...grpc.CallOption) (Metrics_UpdateMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[0], Metrics_UpdateMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsUpdateMetricsClient{stream}
	return x, nil
}

type Metrics_UpdateMetricsClient interface {
	Send(*UpdateMetricRequest) error
	CloseAndRecv() (*UpdateMetricResponse, error)
	grpc.ClientStream
}

type metricsUpdateMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsUpdateMetricsClient) Send(m *UpdateMetricRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsUpdateMetricsClient) CloseAndRecv() (*UpdateMetricResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateMetricResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	UpdateMetrics(Metrics_UpdateMetricsServer) error
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) UpdateMetrics(Metrics_UpdateMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_UpdateMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).UpdateMetrics(&metricsUpdateMetricsServer{stream})
}

type Metrics_UpdateMetricsServer interface {
	SendAndClose(*UpdateMetricResponse) error
	Recv() (*UpdateMetricRequest, error)
	grpc.ServerStream
}

type metricsUpdateMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsUpdateMetricsServer) SendAndClose(m *UpdateMetricResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsUpdateMetricsServer) Recv() (*UpdateMetricRequest, error) {
	m := new(UpdateMetricRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateMetrics",
			Handler:       _Metrics_UpdateMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
