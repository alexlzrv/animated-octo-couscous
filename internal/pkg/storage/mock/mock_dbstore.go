// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metrics "github.com/mayr0y/animated-octo-couscous.git/internal/pkg/metrics"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// GetMetric mocks base method.
func (m *MockStore) GetMetric(ctx context.Context, name, metricType string) (*metrics.Metrics, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, name, metricType)
	ret0, _ := ret[0].(*metrics.Metrics)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockStoreMockRecorder) GetMetric(ctx, name, metricType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockStore)(nil).GetMetric), ctx, name, metricType)
}

// GetMetrics mocks base method.
func (m *MockStore) GetMetrics(ctx context.Context) (map[string]*metrics.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx)
	ret0, _ := ret[0].(map[string]*metrics.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockStoreMockRecorder) GetMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockStore)(nil).GetMetrics), ctx)
}

// LoadMetrics mocks base method.
func (m *MockStore) LoadMetrics(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMetrics", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadMetrics indicates an expected call of LoadMetrics.
func (mr *MockStoreMockRecorder) LoadMetrics(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMetrics", reflect.TypeOf((*MockStore)(nil).LoadMetrics), filePath)
}

// Ping mocks base method.
func (m *MockStore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping))
}

// ResetCounterMetric mocks base method.
func (m *MockStore) ResetCounterMetric(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCounterMetric", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCounterMetric indicates an expected call of ResetCounterMetric.
func (mr *MockStoreMockRecorder) ResetCounterMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCounterMetric", reflect.TypeOf((*MockStore)(nil).ResetCounterMetric), ctx, name)
}

// SaveMetrics mocks base method.
func (m *MockStore) SaveMetrics(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetrics", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics.
func (mr *MockStoreMockRecorder) SaveMetrics(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockStore)(nil).SaveMetrics), filePath)
}

// UpdateCounterMetric mocks base method.
func (m *MockStore) UpdateCounterMetric(ctx context.Context, name string, value metrics.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounterMetric", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounterMetric indicates an expected call of UpdateCounterMetric.
func (mr *MockStoreMockRecorder) UpdateCounterMetric(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounterMetric", reflect.TypeOf((*MockStore)(nil).UpdateCounterMetric), ctx, name, value)
}

// UpdateGaugeMetric mocks base method.
func (m *MockStore) UpdateGaugeMetric(ctx context.Context, name string, value metrics.Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGaugeMetric", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGaugeMetric indicates an expected call of UpdateGaugeMetric.
func (mr *MockStoreMockRecorder) UpdateGaugeMetric(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGaugeMetric", reflect.TypeOf((*MockStore)(nil).UpdateGaugeMetric), ctx, name, value)
}

// UpdateMetrics mocks base method.
func (m *MockStore) UpdateMetrics(ctx context.Context, metricBatch []*metrics.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, metricBatch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockStoreMockRecorder) UpdateMetrics(ctx, metricBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockStore)(nil).UpdateMetrics), ctx, metricBatch)
}
